#+LaTeX_HEADER: \usepackage{syntax}

In the following grammar, *id* denotes a set of identifiers and *float* denotes the set of floating-point values.

#+BEGIN_LaTeX
\begin{grammar}

<automaton> ::= <transition> <automaton> | <transition>

<transition> ::= <state>`,'<vaction>`,'<constr>`,'`['<vtran>`]'`,'<state>`;' 

<state> ::= <id>

<vaction> ::= <action>`('<variables>`)'

<iaction> ::= <action>`('<values>`)'

<taction> ::= <input>`('<values>`)' | <output>

<action> ::= <input> | <output> 

<input> ::= `?'<id>

<output> ::= `!'<id>

<variables> ::= <id> | <id> `,' <variables>

<values> ::= <float> | <float>`,'<values>

<constr> ::= `True' | <bin> | <ter> | <comp>

<comp> ::= `(' <constr> <tnorm> <constr> `)'

<tnorm> ::= `Prod' | `Hama'

<bin> ::= `(' <term> `<=' <term> `)^' <float>
\alt `(' <term> `>=' <term> `)^' <float>
\alt `(' <term> `==' <term> `)^' <float>

<ter> ::= `(' <term> `<=' <term> `<=' <term> `)^' <float>

<term> ::= <id> | <float>

<vtran> ::= <term>`/'<id> | <term>`/'<id>`,'<vtran>

<iactionseq> ::= <iaction> | <iaction>,<iactionseq>

<tactionseq> ::= <taction> | <taction>,<tactionseq>


%<statement> ::= <ident> `=' <expr> 
%\alt `for' <ident> `=' <expr> `to' <expr> `do' <statement> 
%\alt `{' <stat-list> `}' 
%\alt <empty> 

%<stat-list> ::= <statement> `;' <stat-list> | <statement> 

\end{grammar}
#+END_LaTeX

Obs: in this version, output actions just write variables, not expressions.
